Recycler view can be thought as the combination of ListView and GridView. In recycler view there are features that separate your code into maintainable components even as they enforce memory efficient design patterns.
It uses adapter to act as data source, however we need to create ViewHolders to keep references in memory
To provide a new view recycler view either creates a new ViewHolder object to inflate the layout and hold the references or it recycles one from existing stack.
Another perk is -> they come with default animations, we can also create custom animations and apply

Layout Manager ->
This object positions the recycler view's items and tells it to recycle items that have transitioned off the screen.
So if a list item is not visible anymore, it's off screen already.
Then at one point you need to release the memory and you shouldn't do that directly.
Maybe the user wants to scroll back.
All right, so maybe he wants to see whatever he scrolled away.
So it doesn't have to be done directly, but it's something that recycle used or just recycle view class
and layout manager handle themselves.

https://guides.codepath.com/android/using-the-recyclerview

Setup ->
 - Recycler View
 - Item layout
 - View Adapter

Steps :
1. Create the recyclerview_item.xml file
2. Create the Adapter and inherit from
3. RecyclerView.Adapter<MainAdapter.MainViewHolder>() where MainViewHolder is actually the inner class responsible for the recycling and improving the efficiency. It actually describes an item view and metadata about its place.
Define the function in view holder which will assign the respective values to the view.
4. Implement the three methods of the Adapter.
The " override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MainViewHolder" method is responsible to create a view object and create a holder to store this view object
The " override fun onBindViewHolder(holder: MainViewHolder, position: Int)" is responsible to bind the data in views, based on the position it binds the data into view and then shows in the app.
The "override fun getItemCount(): Int" returns the size of the list.
5. In main class create an instance of the Adapter and set the adapter via binding?.rv?.adapter = MainAdapter(taskList)
6. Set the layout manager of the recycler view.
7. If you are using view binding do not forget to destroy the object in onDestroy method



To add the itemClicks :
Can be done by implementing an interface of OnClickListener or by using the invoke method :
 Steps : 
  1. lateinit var onItemClick: ((CategoryMeals) -> Unit)
  2. This in the onBindViewHolder method 
          holder.itemView.setOnClickListener {
                    onItemClick.invoke(mealsList[position])
                }
  3. Now the method can be defined as : 
          popularItemAdapter.onItemClick = { item ->
            // content .....
        }
     // This should take place where the adapter is already initialized.
